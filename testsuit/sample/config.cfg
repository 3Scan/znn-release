# To make every parameter explicite, it is not allowed to use default parameters.
# Please do not delete any item of this configuration file.

[parameters]
#[general]
# specification file of network architecture
fnet_spec = ../networks/N4_A_even.znn
# file of data spec
fdata_spec = ../dataset/Piriform/dataset.spec
# number of threads. if 0, the thread number will be equal to
# the number of concurrent threads supported by the implementation.
num_threads = 4
# data type of arrays: float32 or float64
dtype = float32
# type of network output: boundary or affinity
out_type = affinity
# Whether to record config and log files
logging = no

#[train]
# output size: z,y,x
train_outsz = 1,100,100
# cost function: square_loss, binomial_cross_entropy, softmax_loss, auto
# auto mode will match the out_type: boundary-softmax, affinity-binomial
cost_fn = auto
# learning rate
eta = 0.01
# annealing factor
anneal_factor = 0.997
# saved network name
train_save_net = ../testsuit/sample/net.h5
# initialize from a seed network
train_seed_net =
# load the network
train_load_net =
# files for train
train_range = 1
# files for test
test_range = 2
# momentum
momentum = 0.9
# weight decay
weight_decay = 0

# optimize to choose direct convolution of FFT
is_train_optimize = no
is_forward_optimize = no
force_fft = no
# transform data to enrich training data augmentation?
is_data_aug = yes
# mirror the boundary to get a full size output
is_bd_mirror = yes
# balance the boundary and non-boundary voxel?
is_rebalance = yes
# rebalance the boundary and non-boundary in output patch?
is_patch_rebalance = no
# use malis weighting of gradient?
is_malis = no
# type of malis normalization:
# none: no normalization,
# frac: segment fractional normalization
# num : normalized by N (number of nonboundary voxels)
# pair: normalized by N*(N-1)
malis_norm_type = pair
# whether to use real time visualization
is_visual = no
is_stdio = yes
is_debug = yes

# number of iteration per show
Num_iter_per_show = 1
# number of iteration per test
Num_iter_per_test = 2
# number of iteration per learning rate annealing
Num_iter_per_annealing = 100
# number of forward pass of each test
test_num = 10
# number of iteration per save
Num_iter_per_save = 3
# maximum iteration
Max_iter = 100

#[forward]
# image for forward pass
forward_range = 1
# forward network
forward_net = ../testsuit/sample/net_current.h5
# output size: z,y,x
forward_outsz = 3,100,100
# output file name prefix
output_prefix = ../testsuit/sample/out
